from datetime import datetime
from scapy.all import IP, TCP, sr1, sniff, ICMP, send
from scapy.all import *
import requests
import warnings
import socket
import os

warnings.filterwarnings("ignore")
# min port = 1, max port = 65535
def website_pen_test(url, start_port=1, end_port=10, show_logs=False):
    '''Gathers information about a website as possible. Includes identifying the IP address, server banner, open ports, packets sniffed, and packets sent. Logs are saved in media/website/logs/
    '''     
    url_as_name = url.replace('.', '_').replace('/', '_')
    url = url.replace('http://', '').replace('https://', '').replace('www.', '')
    def logger(msg):
        os.makedirs('media/website/logs', exist_ok=True)
        if not os.path.exists(f'media/website/logs/{url_as_name}.log'):
            with open(f'media/website/logs/{url_as_name}.log', 'w') as f:
                f.write(f'# {datetime.now()} | Penetration test logs for {url}\n')
                f.write('-' * 50 + '\n')
        with open(f'media/website/logs/{url_as_name}.log', 'a') as f:
            if show_logs:
                print(f'üîè {datetime.now()} | {msg}', f)
            f.write(f'# {datetime.now()} | {msg}\n')
    if start_port < 1:
        start_port = 1
    if end_port > 65535:
        end_port = 65535
    '''Perform penetration test on a website'''
    # Initialize the dictionary to store results
    results = {
        'start_port': start_port,
        'end_port': end_port,
        'start_time': str(datetime.now()),
        'url': url
    }
    
    logger(f'Performing penetration test on {url}...')
    ip_address = socket.gethostbyname(url)
    try:
        # Resolve the IP address of the website
        results['ip_address'] = ip_address
        logger(f'IP address of {url} is {ip_address}')
    except socket.gaierror:
        print('Unable to resolve IP address of', url)
        results['ip_address'] = 'Unable to resolve'
        logger(f'Unable to resolve IP address of {url}')

    # Use requests library to get server banner
    try:
        response = requests.get('http://' + url)
        server_banner = response.headers['Server']
        results['server_banner'] = server_banner
        logger(f'Server banner of {url} is {server_banner}')
    except (requests.exceptions.RequestException, KeyError):
        results['server_banner'] = 'Not available'
        logger(f'Server banner of {url} is not available')

    # Use Scapy to perform port scanning
    open_ports = []
    for port in range(start_port, end_port + 1):
        logger(f'Scanning port {port}...')
        packet = IP(dst=ip_address) / TCP(dport=port, flags="S")
        logger(f'Sending packet to {ip_address}:{port}')
        try:response = sr1(packet, timeout=1, verbose=0)
        except Exception as e:
            logger(f'Error scanning port {port}: {e}')
            continue
        logger(f'Received response from {ip_address}:{port}')
        if response:
            open_ports.append(port)
            logger(f'Port {port} is open')
    results['open_ports'] = open_ports
    logger(f'Open ports on {url} are {open_ports}')
    # sniff
    # Use Scapy to perform packet sniffing
    try:packets = sniff(timeout=10)
    except Exception as e:
        logger(f'Error sniffing packets: {e}')
        packets = []
    results['packets'] = len(packets)
    logger(f'Packets sniffed: {len(packets)}')
    
    # send packets
    # Use Scapy to send packets
    packet = IP(dst=ip_address) / ICMP()
    try:send(packet, verbose=0)
    except Exception as e:
        logger(f'Error sending packet: {e}')
    logger(f'Packet sent to {ip_address}')

    logger(f'Penetration test on {url} completed')
    # 
    results['status'] = 'Completed'
    results['time'] = str(datetime.now())
    results['logs']  = f'/media/website/logs/{url_as_name}.log'
    return results

if __name__ == '__main__':
    # Example usage
    website_url = "bbdu.ac.in"
    pen_test_results = website_pen_test(website_url)
    print("Pen test results for", website_url, ":", pen_test_results)

