from django.db import models
from django.contrib.auth.models import User

class Project(models.Model):
    name = models.CharField(max_length=100)
    url = models.URLField()
    user = models.ForeignKey(User, on_delete=models.CASCADE, default=1)

    def str(self):
        return self.name

class TestType(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()

    def __str__(self):
        return self.name
    

class TestResult(models.Model):
    project = models.ForeignKey(Project, on_delete=models.CASCADE)
    test_type = models.ForeignKey(TestType, on_delete=models.CASCADE)
    result_choices = (
        ('Passed', 'Passed'),
        ('Failed', 'Failed'),
        ('Inconclusive', 'Inconclusive'),
    )
    result = models.CharField(max_length=20, choices=result_choices)
    details = models.TextField()

    def str(self):
        return f"{self.project.name} - {self.test_type.name}"

# class Vulnerability(models.Model):
#     name = models.CharField(max_length=100)
#     description = models.TextField()
#     severity_choices = (
#         ('Low', 'Low'),
#         ('Medium', 'Medium'),
#         ('High', 'High'),
#     )
#     severity = models.CharField(max_length=20, choices=severity_choices)
#     remediation = models.TextField()

#     def str(self):
#         return self.name

class TestLog(models.Model):
    test_result = models.ForeignKey(TestResult, on_delete=models.CASCADE)
    timestamp = models.DateTimeField(auto_now_add=True)
    tester = models.CharField(max_length=100)
    notes = models.TextField(blank=True)

    def str(self):
        return f"{self.test_result.project.name} - {self.test_result.test_type.name} - {self.timestamp}"
    
class Contact(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()
    subject = models.CharField(max_length=100)
    message = models.TextField()

    def str(self):
        return self.name
    

# New models
class WebScanner(models.Model):
    '''Model to store the results of a website penetration test'''
    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='web_scans_tests')
    url = models.URLField()
    start_port = models.IntegerField()
    end_port = models.IntegerField()
    start_time = models.DateTimeField()
    ip_address = models.GenericIPAddressField()
    server_banner = models.CharField(max_length=255)
    status = models.CharField(max_length=50)
    open_ports = models.JSONField()
    packets = models.IntegerField()
    time = models.DateTimeField()
    logs = models.FileField(upload_to='website/logs/')
    created_at = models.DateTimeField(auto_now_add=True)
    def __str__(self):
        return f'{self.url} - {self.start_time}'
    
class VulnerabilityTest(models.Model):
    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='vulnerability_tests')
    url = models.URLField()
    xss_vulnerabilities = models.TextField()
    csrf_vulnerabilities = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    def __str__(self):
        return f'{self.project.name} - {self.url}'
    
class SessionHijackingTestResult(models.Model):
    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='session_hijacking_tests')
    url = models.URLField()
    is_vulnerable = models.BooleanField()
    initial_cookies = models.TextField()
    modified_cookies = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    def __str__(self):
        return f"{self.project.name} - Session Hijacking Test"
    

class DirectoryTraversalTestResult(models.Model):
    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='directory_traversal_tests')
    url = models.URLField()
    test_results = models.JSONField()
    created_at = models.DateTimeField(auto_now_add=True)
    def __str__(self):
        return f"{self.project.name} - Directory Traversal Test"
    

class DDoSAttackTest(models.Model):
    '''Model to store the results of a DDoS attack test'''
    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='ddos_tests')
    url = models.URLField()
    requests = models.IntegerField()
    concurrency = models.IntegerField()
    result = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return f"{self.project.name} - {self.url} - {self.timestamp}"
    
class Feedback(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()
    feedback = models.TextField()

    def str(self):
        return self.name  
    
class Subscriber(models.Model):
    email = models.EmailField(unique=True)
    
    def str(self):
        return  self.email
        
        