from django.shortcuts import render ,redirect
from .models import Project, Contact
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from django.contrib import messages
from .website_scanner import website_pen_test
from .directory_traversal_attack import test_directory_traversal
from .session_hijacking import test_session_hijacking_and_cookie_theft
from .ddos_attack import test_ddos_attack
from .vulnerability_assesments import check_xss_csrf_vulnerabilities
from .models import WebScanner, DirectoryTraversalTestResult, SessionHijackingTestResult, DDoSAttackTest, VulnerabilityTest , Feedback, Subscriber
from .urlparse import extract_domain
# Create your views here.
def website_add(request):
    if request.method == 'POST':
        try:
            name = request.POST.get('name')
            url = request.POST.get('website')
            user = request.user
            project = Project(name=name, url=url, user=user)
            project.save()
            messages.success(request, 'Project Created: Website added successfully')
            return redirect('dashboard')
        except:
            messages.error(request, 'Error adding Project')
    return render(request, 'website_add.html')

def website_view(request, id):
    project = Project.objects.get(id=id)
    webscanners = WebScanner.objects.filter(project=project)
    vulnerability_tests = VulnerabilityTest.objects.filter(project=project)
    session_hijacking_tests = SessionHijackingTestResult.objects.filter(project=project)
    ddos_tests = DDoSAttackTest.objects.filter(project=project)
    directory_traversal_tests = DirectoryTraversalTestResult.objects.filter(project=project)  
    print(session_hijacking_tests)
    context = {
        'project': project,
        'scanners': webscanners,
        'xss': vulnerability_tests,
        'hijacks': session_hijacking_tests,
        'ddos': ddos_tests,
        'dirtravels': directory_traversal_tests,
        'pid': id,
        'count_scanners': webscanners.count(),
        'count_xss': vulnerability_tests.count(),
        'count_hijacks': session_hijacking_tests.count(),
        'count_ddos': ddos_tests.count(),
        'count_dirtravels': directory_traversal_tests.count(),
    }
    return render(request, 'website_view.html', context)

def website_delete(request, id):
    project = Project.objects.get(id=id)
    project.delete()
    messages.success(request, 'Project Deleted: Website deleted successfully')
    return redirect('dashboard')

def dashboard(request):
    projects = Project.objects.filter(user=request.user)

    web_scans = []
    vulnerability_tests = []
    session_hijacking_tests = []
    ddos_tests = []
    directory_traversal_tests = []

    for project in projects:
        web_scans.append(project.web_scans_tests.all())
        vulnerability_tests.append(project.vulnerability_tests.all())
        session_hijacking_tests.append(project.session_hijacking_tests.all())
        ddos_tests.append(project.ddos_tests.all())
        directory_traversal_tests.append(project.directory_traversal_tests.all())

    print(vulnerability_tests)
    print(session_hijacking_tests)

    context = {
        'projects': projects,
        'web_scans': web_scans,
        'vulnerability_tests': vulnerability_tests,
        'session_hijacking_tests': session_hijacking_tests,
        'directory_traversal_tests': directory_traversal_tests,
        'ddos_tests': ddos_tests,
    }

    return render(request, 'dashboard.html', context)

def test_selection(request, id):
    project = Project.objects.get(id=id)
    return render(request, 'test_selection.html', {
        'project': project,
        'pid': id,
    })

def execute_scanner(request):
    if request.method == 'POST':
        project_id = request.POST.get('project_id')
        project = Project.objects.get(id=project_id)
        start_port = request.POST.get('start_port')
        end_port = request.POST.get('end_port')
        show_logs = request.POST.get('show_logs')
        if show_logs == 'on':
            result = website_pen_test(extract_domain(project.url), int(start_port), int(end_port), show_logs)
        else:
            result = website_pen_test(extract_domain(project.url), int(start_port), int(end_port))
        # store result
        webscanner = WebScanner(
            project=project,
            url = project.url,
            start_port=start_port,
            end_port=end_port,
            start_time = result['start_time'],
            ip_address = result['ip_address'],
            server_banner = result['server_banner'],
            status = result['status'],
            open_ports = result['open_ports'],
            packets = result['packets'],
            time = result['time'],
            logs = result['logs'],
        )
        webscanner.save()
        messages.success(request, 'Web Scanner Test Completed')
    return redirect('dashboard')

def execute_vulner(request):
    if request.method == 'POST':
        try:
            project_id = request.POST.get('project_id')
            project = Project.objects.get(id=project_id)
            result = check_xss_csrf_vulnerabilities(extract_domain(project.url))
            # store result
            vulnerability = VulnerabilityTest(
                project=project,
                url=project.url,
                xss_vulnerabilities=result['xss_vulnerabilities'],
                csrf_vulnerabilities=result['csrf_vulnerabilities'],
            )
            vulnerability.save()
            messages.success(request, 'Vulnerability Test Completed')
        except Exception as e:
            messages.error(request, "Could not execute the scan")
    return redirect('dashboard')

def execute_hijack(request):
    if request.method == 'POST':
        project_id = request.POST.get('project_id')
        project = Project.objects.get(id=project_id)
        result = test_session_hijacking_and_cookie_theft(project.url)
        # store result
        hijack = SessionHijackingTestResult(
            project=project,
            url=project.url,
            is_vulnerable=result['is_vulnerable'],
            initial_cookies=result['initial_cookies'],
            modified_cookies=result['modified_cookies'],
        )
        hijack.save()
        messages.success(request, 'Session Hijacking Test Completed')
    return redirect('dashboard')

def execute_dirtravel(request):
    if request.method == 'POST':
        project_id = request.POST.get('project_id')
        project = Project.objects.get(id=project_id)
        result = test_directory_traversal(project.url)
        # store result
        dirtravel = DirectoryTraversalTestResult(
            project=project,
            url=project.url,
            test_results=result,
        )
        dirtravel.save()
        messages.success(request, 'Directory Traversal Test Completed')
    return redirect('dashboard')


def execute_ddos(request):
    if request.method == 'POST':
        project_id = request.POST.get('project_id')
        project = Project.objects.get(id=project_id)
        requests = request.POST.get('requests')
        concurrency = request.POST.get('concurrency')
        result = test_ddos_attack(extract_domain(project.url), requests, concurrency)
        # store result
        ddos = DDoSAttackTest(
            project=project,
            url=project.url,
            requests=requests,
            concurrency=concurrency,
            result=result,
        )
        ddos.save()
        messages.success(request, 'DDoS Attack Test Completed')
    return redirect('dashboard')

def report(request):
    return render(request, 'report.html')

def feedback_view(request):
     if request.method == 'POST':
        try:
            name = request.POST.get('name')
            email = request.POST.get('email')
            feedback = request.POST.get('feedback')
            feedback = Feedback(name=name, email=email, feedback=feedback)
            feedback.save()
            messages.success(request, 'Feedback submitted')
            return redirect('home')
        except:
           messages.error(request, 'Error in submitting feedback')
     return render(request, 'index.html')


def about(request):
    return render(request, 'about.html')

def contact_view(request):
    if request.method == 'POST':
        try:
            name = request.POST.get('name')
            email = request.POST.get('email')
            subject = request.POST.get('subject')
            message = request.POST.get('message')
            contact = Contact(name=name, email=email, subject=subject, message=message)
            contact.save()
            messages.success(request, 'Message sent')
            return redirect('home')
        except:
            messages.error(request, 'Error sending message')
    return render(request, 'contact.html')


def subscriber_view(request):
    if request.method == 'POST':
        email = request.POST.get('email')
        try:
            Subscriber.objects.get(email=email)
            messages.error(request, 'Email already exists')
        except Subscriber.DoesNotExist:
            try:
                subscriber = Subscriber(email=email)
                subscriber.save()
                messages.success(request, 'Subscribed')
                return redirect('home')  # or wherever you want to redirect after subscribing
            except:
                messages.error(request, 'Error in subscribing')
    return render(request,'index.html')